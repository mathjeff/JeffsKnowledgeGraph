# Information about terminals

Using the terminal efficiently

 - What is a terminal?
 - Terminal up arrow
 - Terminal history search
 - Terminal tab complete
 - Terminal copy
 - Terminal paste
 - Shell functions
 - Shell paths
 - Shell initialization scripts

What is a terminal?

  A terminal is a window that you type text commands into.

  Those text commands get executed by another program called a shell.

  A terminal may also be called a command prompt or a console.

 - What is a shell?

What is a shell?

  A shell is a program that parses strings, converts them into collections of commands, and runs them.

  Bash is an example of a shell.

 - What is a computer program?

What is a computer program?

  A computer program is a set of instructions that a computer can run

Terminal up arrow

  Pressing the up arrow in a terminal will restore the previous command

 - What is a terminal?

Terminal history search

  Here are some ways to see which commands you ran in the terminal

 - Terminal reverse search
 - Terminal history command
 - SessionManager

Terminal reverse search

  In a terminal, you can press "Ctrl-R" and type some text to search for earlier instances where you typed that command

 - What is a terminal?

Terminal history command

  To view a history of the commands you ran in a terminal, you can run the `history` command

 - How do I run commands in a terminal?

How do I run commands in a terminal?

  To run commands in a terminal, you can type a command into it and press Enter.

 - What is a terminal?

 - What is the format of a shell command?

 - Which arguments can I give to a shell command?

What is the format of a shell command?

  A shell command can be one of:

    * A program and some arguments

        * The first word is the program name, and subsequent words are arguments

        * For example in the command `echo hi there`:

            * `echo` is the command

            * `hi` is the first argument

            * `there` is the second argument

        * When a user runs `echo hi there`, the shell will run the `echo` command and pass it "hi" as the first argument and "there" as the second argument".

            * This will cause the shell to output the text "hi there".

    * Multiple other shell commands joined by something else

 - What is a shell?

How do I join shell commands inline?

  You can join shell commands in several ways.

  If you want to wait for the first command to complete, and only if it succeeds you want to run the second command, you can use `&&`. For example:

    `echo a && echo b`

  If you want to wait for the first command to complete, and run the second command regardless of its success or failure status, you can use `||`. For example:

    `stat /nonexistent || echo b`

  If you want to run both commands at the same time and use the output of one as the input of the other, you can use `|`. For example:

    `echo abcdefg | grep --color b`

 - What is the format of a shell command?
 - What is a shell pipe?

Which arguments can I give to a shell command?

  Many built-in commands provide a manual page. You can often type `man <commandName>` to open the manual page for that command

  Many commands will explain how to use them if you add the "--help" argument. For example, you can run `grep --help` to learn about using `grep`.

  Many commands will explain how to use them if you run them with no arguments. For example, you can run `git` to learn about using `git`.

  Many commands are documented on the internet. You can often ask a search engine a question like `<commandName> arguments` for more information

  Some commands are documented in Jeff's Knowledge Graph.

 - What is the format of a shell command?

 - How can I read command help?

 - How do I find information in Jeff's Knowledge Graph?


How can I read command help?

  If a command help contains text between "<" and ">", this is a variable name that you should replace with your own text.

  If a command help contains text between "[" and "]", this is optional.

  For example:

  An excerpt of the output of `git --help` is:

  `git [--help] <command> [<args>]`

  The `[--help]` means that it's allowed to add the argument "--help" but not required.

  The `<command>` means that it's required to include some other word and that that word will be interpreted as a command.

  The `[<args>]` means that you may include other text after that, and if you do, it will be interpreted as args (which is short for "arguments").

  For example, if you run `git log -p`, this means `command` is "log" and `args` is "-p"

 - What is a shell?

Terminal tab complete

  When typing a filepath in the terminal, you can press `tab` to autocomplete a filename

  For example, if you have a directory containing file named `sample`, you can type `echo sa` and press the tab key, and the terminal should autocomplete to say `echo sample` (assuming there are other no files or directories with names starting with `sa` in that directory)

 - Shell paths
 - What is a shell?

Terminal new directory

  To make a new directory in the terminal, type `mkdir <somedir>`

  For example, you can type `mkdir sample` to make an empty dir called "sample"

 - Shell paths

Shell paths

  File paths in a shell are essentially the same as file paths for other programs, with some extra features.

  * The path `~` in a shell refers to your home directory.
      * In a shell you can run `echo ~` to see the file path of your home directory
  * The path `*` will be expanded to all existent inodes.
      * You can run `ls *.txt` to list all filenames that end with ".txt" in the current directory

 - What is an inode?
 - File paths

File paths

 - Relative file paths
 - Absolute file paths

Absolute file paths

  An absolute path identifies a file or directory on a computer.
  Each file or directory can be accessed by its absolute path.

  An absolute path is a string starting with "/".

    For example, `/tmp` is an absolute path.
    To see the contents of the `/tmp` directory, you can run `ls /tmp`.

 - Filesystem directory hierarchy

Relative file paths

  A relative file path is any path that is not an absolute file path.

  A relative path can be converted into an absolute path by starting at another directory, and following the relative path.

  Many programs interpret a relative path based on their process's working directory.

  Examples:

  * `tmp` is a relative path.
  * `example` is a relative path.
  * If the working directory is `/` and you want to check whether the file `/tmp/example` exists, you can run either `ls tmp/example` or `ls /tmp/example` to check.
  * If the working directory is `/tmp` and you want to check whether the file `/tmp/example` exists, you can run either `ls example` or `ls /tmp/example` to check.

  Special relative paths
  * The path `.` refers to the current directory.
      * You can run `ls .` to look at the contents of the working directory. This is the same as running `ls`
  * The path `..` refers to the parent directory.
      * If the working directory is `/tmp/example/subdir`, you can run `ls ..` to list the contents of `/tmp/example`

 - Absolute file paths
 - Working directory

Working directory

  Each program in a computer has a working directory which essentially refers to whichever directory it is currently looking at.

  To see the working directory, you can run `pwd`

  To change the working directory, you can run `cd <someNewDir>`

Terminal copy

  When there is text on the screen in your terminal, you can copy it!

    On Linux, press Ctrl-Shift-C.
      Don't accidentally just press Ctrl-C . That will cancel the current command
    On Mac, press Apple-C
    On Windows, press Ctrl-Insert

 - What is a shell?

Terminal paste

  You can paste text into your terminal that you previously copied

    On Linux, press Ctrl-Shift-V
    On Mac, press Apple-V
    On Windows, press Shift-Insert

 - Terminal copy

Shell functions

  If you feel that you are doing too much typing in your terminal, you can create functions to do things for you.

  To declare a function, write something like this:

  ```
    function hello() {
      echo hi
    }
  ```

  You can put this text into your terminal initialization script if you want it to persist.

 - Shell initialization scripts

Shell initialization scripts

  When a shell starts, it runs one or more initialization scripts.
  On Linux, this path is usually ~/.bashrc for interactive sessions (like the terminal)
  On Cygwin in Windows, this is the same as in Linux
  On Mac, this path is usually ~/.bashrc for Bash or ~/.zshrc for Zsh

  You can make modifications to these files if you want to change behavior or add features to your terminal

  If you modify one of these files and want to apply the new file to your current shell, you can source it

    For example, if you modify ~/.bashrc you could run `source ~/.bashrc`

    This reruns the entire file

 - What is a shell?

Stopping a command in the terminal

  If you want to stop a command in the terminal, you can either cancel it or pause it

 - Cancelling a command in the terminal

 - Pausing a command in the terminal

Cancelling a command in the terminal

  To cancel a command in the terminal, press Ctrl-C

  If that doesn't work, you can try terminating the process

 - Cancelling a process on Linux

Pausing a command in the terminal

  To pause a command in the terminal, press Ctrl-Z.

  To resume a paused command, run `fg` (which stands for "foreground")

  To run a paused command in the background, run `bg`

 - Shell background jobs
 - What is a computer process?

SessionManager

  SessionManager is a project by Jeff Gaston to make it easier to remember:

  * What tasks you've been doing
  * Why you've been doing them
  * What the status of each is

  It can be found at https://github.com/mathjeff/SessionManager

 - Take notes

Counting text

  To count the number of lines in a text you can use `wc -l`

    For example: `echo -e "abc\ndef" | wc -l` outputs `2`

  To count the number of a specific type of line in a text, you can first filter it with `grep` and then count with `wc`

 - What is grep?

What is grep?

  `grep` is a tool for searching for text in other text

  For example: `echo -e "apple\nbanana\npotato" | grep 'p'` says

  ```
  apple
  potato
  ```

 - What is echo?

Bash variables

  In Bash, you can create a variable and assign it a value using `=`.

  You can get the value of a variable by typing `$` followed by its name.

  For example:

  ```
    a=5
    echo "$a"
  ```

  should output `5`

 - What is echo?

What is echo?

  `echo` is a shell command that outputs text. For example, `echo abc` says `abc` and `echo` makes a blank line.

What is this shell command?

  A shell command starts with a command name.
  The command name is the characters until the first space, tab or newline

  For example, if you run

  ```
  echo hi
  ```

  then `echo` is the command name and `hi` is an argument.

  If you want to know where a command is defined, you can run `type <command>`.

  For example:

  ```
  /tmp $ type echo
  echo is a shell builtin
  /tmp  $ type ls
  ls is hashed (/usr/bin/ls)
  /tmp $ type gst # I made this function myself
  gst is a function
  gst ()
  {
      git status "$@"
  }
  ```

How can I use sed?

  Using [sed](https://www.howtogeek.com/666395/how-to-use-the-sed-command-on-linux/) usually looks like this:

  `echo example | sed 's/<matcher>/<replacement>/`

  For example:

  ```
  $ echo example | sed 's/e/E/'
  Example

  ```

  To replace each match in a line, add a 'g' at the end like this:

  ```
  $ echo example | sed 's/e/E/g'
  ExamplE
  ```

 - What is echo?
 - How can I read command help?

How can I replace text in a shell?

  You can replace text in a shell using any command that can do the replacements that you need.

  A common program for doing text replacement in the shell is `sed`.

 - How can I use sed?

How can I modify lots of files at once?

  If you have a simple change that you want to make to lots of files, you can make them using Bash.

  Steps:

  1. Get a list of changes you want to make.
  2. Write some code for turning this list of changes into a list of instructions.
  3. Read the list of instructions to make sure it looks right. You don't want to accidentally do it wrong!
  4. Run the above commands in Bash.

  For example:

  If you have a bunch of files that you want to move into a subdirectory, you can do this:

  ```
  $ ls
  a  b  c  d  e
  $ mkdir child
  $ ls
  a  b  c  child  d  e
  $ ls | grep -v child
  a
  b
  c
  d
  e
  $ ls | grep -v child | sed 's/^\(.*\)/mv \1 child/'
  mv a child
  mv b child
  mv c child
  mv d child
  mv e child
  $ ls | grep -v child | sed 's/^\(.*\)/mv \1 child/' | bash
  $ ls
  child
  $ ls child
  a  b  c  d  e
  ```

 - How can I replace text in a shell?
 - What is grep?
 - Terminal new directory

What commands can I run in Bash?

  When you run a command in Bash:

  * If the command name contains a "/", then Bash will interpret this as a filepath and look for the file with that path.

  * If the command name doesn't contain a "/", Bash will check whether the command is a builtin (or a function or an alias).

      * A builtin command is a command that the shell understands but is not a program and is not a file

      * For example, `pwd` is built into the shell (and displays the current working directory), but there isn't a program named `pwd` on your computer that you can click on

  * If the command isn't a path or a builtin, then Bash will look at a variable named "$PATH", convert it to a list of directories, and check each of those directories for a command with that name

      * The value of `$PATH` could, for example, be `/usr/local/bin:/usr/bin`

          * This means that Bash will check the `/usr/local/bin` directory and the `/usr/bin` directory for programs matching a name that you type

      * If you want to see the list of paths that Bash will search, you can do `echo $PATH`

          * If you want to display each one on its own line, you can replace ':' with '\n' by running `echo $PATH | sed 's/:/\n/g'`

              * In the example above, this will output

                  ```
                  /usr/local/bin
                  /usr/bin
                  ```


 - Shell paths
 - What is this shell command?
 - How can I use sed?

How can I run multiple commands in parallel in the shell?

 - Manually running multiple commands in a shell
 - Automatically running multiple commands in a shell

Shell background jobs

  You can run a command in the background of your shell by adding `&` at the end. This lets you run another command in the same shell before it is done.
  * For example:
  ```
  $ sleep 4 && echo slept 4 &
  [1] 43325
  $ echo hi
  hi
  $ slept 4
  [1]+  Done                    sleep 4 && echo slept 4
  ```

 - What is a shell?

Manually running multiple commands in a shell

  If you have a few commands that you want to run at the same time in a shell, you can:

  * Open multiple terminals and run each command in a different one
  * Run a command in the background of your shell

 - What is a shell?
 - Shell background jobs

Automatically running multiple commands in a shell

  If you have many commands that you want to run at the same time, you can do that via the `parallel` command

 - The parallel command

The parallel command

  The `parallel` command is also described [here](https://www.gnu.org/software/parallel/parallel_tutorial.html).

  It reads standard input to get a list of jobs to run

  It looks at its arguments for information about how to run these jobs

  * To specify how many jobs to run at once, use the `-j` argument.

      * To specify to run 4 jobs at once, do `parallel -j4`

  * To specify what `parallel` should do if one job fails, use the `--halt` argument

      * To specify that when one job fails, no new jobs should be started, add `--halt soon,fail=1`

  * If you want to run the same command repeatedly and just add different arguments, you can add that command as an argument to `parallel`

      * For example: `echo -ne "file1\nfile2" | parallel wc` will run `wc file1` and `wc file2` in parallel

      * You can also add additional arguments to each invocation of the command by adding them as additional arguments to `parallel`

          * For example, `echo -ne "file1\nfile2" | parallel wc -l` will run `wc -l file1` and `wc -l file2` in parallel

  For example, if you want to `ls -la <file>` for each of several files, run two jobs at a time, and stop launching new jobs after one fails, you can do this:

    ```
    $ echo -e "a\nb\nc\nd\nmissing\nnonexistent\ne\nf\ng\nh\ni\nj" | parallel -j2 --halt soon,fail=1 ls -la
    -rw-rw-r-- 1 jeff users 0 Apr 29 02:22 a
    -rw-rw-r-- 1 jeff users 0 Apr 29 02:22 b
    -rw-rw-r-- 1 jeff users 0 Apr 29 02:22 c
    -rw-rw-r-- 1 jeff users 0 Apr 29 02:22 d
    ls: cannot access 'missing': No such file or directory
    parallel: This job failed:
    ls -la missing
    parallel: Starting no more jobs. Waiting for 1 jobs to finish.
    ls: cannot access 'nonexistent': No such file or directory
    parallel: This job failed:
    ls -la nonexistent
    ```

 - What is a shell pipe?
 - What is echo?

What is standard input?

  Standard input (often called `stdin`) is somewhere where a process can read text from.

  When a process is running in a shell, the process's standard input is usually reading the letters that you type

  For example:

  * Run `head -n 3` and press `<enter>`.

      * This will start a program called `head`, ask it to read the first 3 lines of input, and output them to the screen.

      * The next 3 lines of text that you type will be echoed back to you like they usually are, and they will also be echoed again by the `head` command, so they will be displayed twice each.

      * For example:
        ```
        $ head -n 3
        This is the first line that I typed
        This is the first line that I typed
        This is the second line that I typed
        This is the second line that I typed
        This is the third line that I typed
        This is the third line that I typed
        ```

 - What is a computer process?
 - What is a shell?

What is a shell pipe?

  A shell pipe runs multiple commands at once and uses the output of one command as the input of the other.

  For example:

    `echo abcdefg | grep --color b`

 - What is standard input?
 - What is echo?

Tips for slow shell commands

 - What to do about a slow command?
 - Keeping a shell command running after closing the terminal

Keeping a shell command running after closing the terminal

  When you `ssh` into another computer to run a command, by default your command will stop running when you exit your `ssh` sssion (like when your turn off your own computer).

  Similarly, if you run a command on your own computer and then you close your terminal, by default your command will be terminated.

  To keep your command running after closing the terminal, you can simply use `nohup`, or you can use `screen` or `tmux` to create sessions and give them custom names

 - Shell nohup
 - Shell screen command
 - Shell tmux

Shell nohup

  When you `ssh` into another computer to run a command, by default your command will stop running when you exit your `ssh` sssion (like when your turn off your own computer).

  Similarly, if you run a command on your own computer and then you close your terminal, by default your command will be terminated.

  If you don't want your command to stop when you close your terminal, you can use `nohup`.

  To use `nohup`, you can run `nohup <command>`. Output from the command will usually be put into a file called `nohup.out`

  If you still want to be able to run more commands in your terminal, you can run this command in the background

 - Shell background jobs


Shell screen command

  `screen` is a shell program that allows you to create shell sessions

  * Each one can have its own name
  * Each one can keep running its commands even when you exit your shell
  * Each one can be reattached to later by another shell

  You can find some information about how to use it [here](https://www.golinuxcloud.com/command-screen-linux/)

Shell tmux

  [tmux](https://man.openbsd.org/OpenBSD-current/man1/tmux.1) is a terminal program that allows you to create other virtual terminals:

  * Each one can have its own name
  * Each one can keep running its commands even when you close the original termianl
  * Each one can be reattached to later by another terminal

  You can find some information about how to use it [here](https://www.howtogeek.com/671422/how-to-use-tmux-on-linux-and-why-its-better-than-screen/)
