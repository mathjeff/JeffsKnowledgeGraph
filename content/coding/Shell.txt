# Information about terminals

Using the terminal efficiently

 - What is a terminal?
 - Terminal up arrow
 - Terminal history search
 - Terminal tab complete
 - Terminal copy
 - Terminal paste
 - Shell functions
 - Shell paths
 - Shell initialization scripts

What is a terminal?

  A terminal is a window that you type text commands into.

  Those text commands get executed by another program called a shell.

  A terminal may also be called a command prompt or a console.

 - What is a shell?

What is a shell?

  A shell is a program that parses strings, converts them into collections of commands, and runs them.

  Bash is an example of a shell.

 - What is a computer program?

What is a computer program?

  A computer program is a set of instructions that a computer can run

Terminal up arrow

  Pressing the up arrow in a terminal will restore the previous command

 - What is a terminal?

Terminal history search

  Here are some ways to see which commands you ran in the terminal

 - Terminal reverse search
 - Terminal history command
 - SessionManager

Terminal reverse search

  In a terminal, you can press "Ctrl-R" and type some text to search for earlier instances where you typed that command

 - What is a terminal?

Terminal history command

  To view a history of the commands you ran in a terminal, you can run the `history` command

 - How do I run commands in a terminal?

How do I run commands in a terminal?

  To run commands in a terminal, you can type a command into it and press Enter.

 - What is a terminal?

 - What is the format of a shell command?

 - Which arguments can I give to a shell command?

What is the format of a shell command?

  A shell command can be one of:

    * A program and some arguments

        * The first word is the program name, and subsequent words are arguments

        * For example in the command `echo hi there`:

            * `echo` is the command

            * `hi` is the first argument

            * `there` is the second argument

        * When a user runs `echo hi there`, the shell will run the `echo` command and pass it "hi" as the first argument and "there" as the second argument".

            * This will cause the shell to output the text "hi there".

    * Multiple other shell commands joined by something else

 - What is a shell?

How do I join shell commands inline?

  You can join shell commands in several ways.

  If you want to wait for the first command to complete, and only if it succeeds you want to run the second command, you can use `&&`. For example:

    `echo a && echo b`

  If you want to wait for the first command to complete, and run the second command regardless of its success or failure status, you can use `||`. For example:

    `stat /nonexistent || echo b`

  If you want to run both commands at the same time and use the output of one as the input of the other, you can use ```. For example:

    `echo abcdefg | grep --color b`

 - What is the format of a shell command?

Which arguments can I give to a shell command?

  Many built-in commands provide a manual page. You can often type `man <commandName>` to open the manual page for that command

  Many commands will explain how to use them if you add the "--help" argument. For example, you can run `grep --help` to learn about using `grep`.

  Many commands will explain how to use them if you run them with no arguments. For example, you can run `git` to learn about using `git`.

  Many commands are documented on the internet. You can often ask a search engine a question like "<commandName> arguments" for more information

 - What is a shell?

 - How can I read command help?

How can I read command help?

  If a command help contains text between "<" and ">", this is a variable name that you should replace with your own text.

  If a command help contains text between "[" and "]", this is optional.

  For example:

  An excerpt of the output of `git --help` is:

  `git [--help] <command> [<args>]`

  The `[--help]` means that it's allowed to add the argument "--help" but not required.

  The `<command>` means that it's required to include some other word and that that word will be interpreted as a command.

  The `[<args>]` means that you may include other text after that, and if you do, it will be interpreted as args (which is short for "arguments").

  For example, if you run `git log -p`, this means `command` is "log" and `args` is "-p"

 - What is a shell?

Terminal tab complete

  When typing a filepath in the terminal, you can press `tab` to autocomplete a filename

  For example, if you have a directory containing file named `sample`, you can type `echo sa` and press the tab key, and the terminal should autocomplete to say `echo sample` (assuming there are other no files or directories with names starting with `sa` in that directory)

 - Shell paths
 - What is a shell?

Terminal new directory

  To make a new directory in the terminal, type `mkdir <somedir>`

  For example, you can type `mkdir sample` to make an empty dir called "sample"

 - Shell paths

Shell paths

  File paths in a shell are essentially the same as file paths for other programs, with some extra features.

  * The path `~` in a shell refers to your home directory.
      * In a shell you can run `echo ~` to see the file path of your home directory
  * The path `*` will be expanded to all existent inodes.
      * You can run `ls *.txt` to list all filenames that end with ".txt" in the current directory

 - What is an inode?
 - File paths

File paths

 - Relative file paths
 - Absolute file paths

Absolute file paths

  An absolute path identifies a file or directory on a computer.
  Each file or directory can be accessed by its absolute path.

  An absolute path is a string starting with "/".

    For example, `/tmp` is an absolute path.
    To see the contents of the `/tmp` directory, you can run `ls /tmp`.

 - Filesystem directory hierarchy

Relative file paths

  A relative file path is any path that is not an absolute file path.

  A relative path can be converted into an absolute path by starting at another directory, and following the relative path.

  Many programs interpret a relative path based on their process's working directory.

  Examples:

  * `tmp` is a relative path.
  * `example` is a relative path.
  * If the working directory is `/` and you want to check whether the file `/tmp/example` exists, you can run either `ls tmp/example` or `ls /tmp/example` to check.
  * If the working directory is `/tmp` and you want to check whether the file `/tmp/example` exists, you can run either `ls example` or `ls /tmp/example` to check.

  Special relative paths
  * The path `.` refers to the current directory.
      * You can run `ls .` to look at the contents of the working directory. This is the same as running `ls`
  * The path `..` refers to the parent directory.
      * If the working directory is `/tmp/example/subdir`, you can run `ls ..` to list the contents of `/tmp/example`

 - Absolute file paths
 - Working directory

Working directory

  Each program in a computer has a working directory which essentially refers to whichever directory it is currently looking at.

  To see the working directory, you can run `pwd`

  To change the working directory, you can run `cd <someNewDir>`

Terminal copy

  When there is text on the screen in your terminal, you can copy it!

    On Linux, press Ctrl-Shift-C.
      Don't accidentally just press Ctrl-C . That will cancel the current command
    On Mac, press Apple-C
    On Windows, press Ctrl-Insert

 - What is a shell?

Terminal paste

  You can paste text into your terminal that you previously copied

    On Linux, press Ctrl-Shift-V
    On Mac, press Apple-V
    On Windows, press Shift-Insert

 - Terminal copy

Shell functions

  If you feel that you are doing too much typing in your terminal, you can create functions to do things for you.

  To declare a function, write something like this:

  ```
    function hello() {
      echo hi
    }
  ```

  You can put this text into your terminal initialization script if you want it to persist.

 - Shell initialization scripts

Shell initialization scripts

  When a shell starts, it runs one or more initialization scripts.
  On Linux, this path is usually ~/.bashrc for interactive sessions (like the terminal)
  On Cygwin in Windows, this is the same as in Linux
  On Mac, this path is usually ~/.bashrc for Bash or ~/.zshrc for Zsh

  You can make modifications to these files if you want to change behavior or add features to your terminal

  If you modify one of these files and want to apply the new file to your current shell, you can source it

    For example, if you modify ~/.bashrc you could run `source ~/.bashrc`

    This reruns the entire file

 - What is a shell?

Stopping a command in the terminal

  If you want to stop a command in the terminal, you can either cancel it or pause it

 - Cancelling a command in the terminal

 - Pausing a command in the terminal

Cancelling a command in the terminal

  To cancel a command in the terminal, press Ctrl-C

  If that doesn't work, you can try terminating the process

 - Cancelling a process on Linux

Pausing a command in the terminal

  To pause a command in the terminal, press Ctrl-Z.

  To resume a paused command, run `fg` (which stands for "foreground")

  To run a paused command in the background, run `bg`

 - What is a computer process?

SessionManager

  SessionManager is a project by Jeff Gaston to make it easier to remember:

    What tasks you've been doing

    Why you've been doing them

    What the status of each is

  It can be found at https://github.com/mathjeff/SessionManager

 - Who is Jeff?

Counting text

  To count the number of lines in a text you can use `wc -l`

    For example: `echo -e "abc\ndef" | wc -l` outputs `2`

  To count the number of a specific type of line in a text, you can first filter it with `grep` and then count with `wc`

 - What is grep?

What is grep?

  `grep` is a tool for searching for text in other text

  For example: `echo -e "apple\nbanana\npotato" | grep 'p'` says

  ```
  apple
  potato
  ```

 - What is echo?

Bash variables

  In Bash, you can create a variable and assign it a value using `=`.

  You can get the value of a variable by typing `$` followed by its name.

  For example:

  ```
    a=5
    echo "$a"
  ```

  should output `5`

 - What is echo?

What is echo?

  `echo` is a shell command that outputs text. For example, `echo abc` says `abc` and `echo` makes a blank line.

What is this shell command?

  A shell command starts with a command name.
  The command name is the characters until the first space, tab or newline

  For example, if you run

  ```
  echo hi
  ```

  then `echo` is the command name and `hi` is an argument.

  If you want to know where a command is defined, you can run `type <command>`.

  For example:

  ```
  /tmp $ type echo
  echo is a shell builtin
  /tmp  $ type ls
  ls is hashed (/usr/bin/ls)
  /tmp $ type gst # I made this function myself
  gst is a function
  gst ()
  {
      git status "$@"
  }
  ```
