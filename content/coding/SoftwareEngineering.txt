# Information about Software Engineering

What is software engineering?

  Software engineering is the process of developing software at scale

Software engineering tips

 - What is software engineering?

 - Automating

 - Avoid duplicate code

 - Asking for help is efficient for unfamiliar tasks

 - New people take time to become efficient

 - Dependencies aren't free

 - Software testing

 - Backwards compatibility

Automating

 - Automating can be highly efficient

 - Automating efficiently

Automating can be highly efficient

  Automating important tasks tends to provide substantial improvements to efficiency.

  If, for example, every day you can improve average efficiency by 1%, then after 365 days, efficiency will be approximately 37 times as much as when you started.

 - What is automation?

Automating efficiently

 - What is automation?

 - How can I decide what to automate?

 - How can I automate a task?

 - Scale

What is automation?

  Automation is the process of creating a system to do something on its own that would otherwise be done by a person.

How can I decide what to automate?

  Tasks that are valuable to automate are tasks whose net present value of their benefits are higher than their costs.

  If you want to know whether to automate a particular task, you should be reasonably confident about the costs and benefits, along with other things you could be doing instead.

  You should also incorporate potential risks of automating a task incorrectly: what's the cost of a potential bug in an automation solution?

 - What is net present value?

 - How do you estimate the benefit of automating?

 - How do you estimate the cost of automating?

What is net present value?

  The net present value of something in the future is a measurement of how much value today you would trade in exchange for that thing in the future.

  In economics, we can compute the current value of future money via interest rates. For example, if someone has the opportunity to invest $1 today to get $1.10 next year, it means the net present value of $1.10 is $1. Then we can divide by 1.1 to get that the net present value of $1 next year is approximately $0.91.

  Similarly, $1 two years from now would be worth $1.21 so $1 next year would be worth about $0.82 . If we want to know the net present value of getting $1 every year forever, assuming a compounding rate of 1.1, this sum equals 1 + 1/1.1 + 1/1.1^2... which equals $10.

  Note that the net present value of a future event is dependent on the interest rate (0.1 in the example above).

How do you estimate the benefit of automating?

  The benefit of automation is to not have to do a certain task manually in the future.

  One simple way to estimate the cost of doing a task in the future is to assume that it will remain similar to the cost in the present. For example, if you have repeatedly spent an average of 10 minutes every day on a specific task in the past, it may be reasonable to suppose that if nothing changes, you will spend an average of 10 minutes every day on this task in the future.

  As a result, if a task is a little bit inconvenient to do manually and is more effort to automate, it is often worthwhile to do the task manually several times to get an estimate of the cost of not automating it, before spending the larger effort required to automate it.

  Determining the cost of repeatedly doing a task manually can be difficult if the cost is spread out among several people. This means that learning what is inconvenient for others to do makes it easier to know what to improve.

  There are several ways to learn what tasks are difficult for other people, including:

  * Asking people if they have any complaints

  * Surveying people about specific concerns

  * Modifying the tool that they use to measure any inconveniences, such as time spent

  * Modifying the tool to make it easy for users to complain when they are using it

  If the task is difficult, boring, and important, then in addition to saving time, automation might also improve accuracy, by being more reliable than a human.

 - What is automation?

 - People make mistakes

How do you estimate the cost of automating?

  Estimating the cost of automation is difficult. Here are some possible approaches:

  *   In many cases, it's not necessary to get a precise estimate, and instead it's adequate to just determine whether one task is more difficult than another.

  *   One way to estimate the difficulty of the project is to start the project and see what difficulties are found.

      * If you can identify the aspects of the project that are most unknown/risky and work on them first, this allows you to more quickly improve your estimate of the difficulty of the project

  *   These types of things tend to take more time:

      * Modifying a large amount of code

      * Working in an unfamiliar system

 - What is automation?

How can I automate a task?

  * If you would like to teach your computer to do the task, you might be interested in reading about terminals or Python

  * If you would like to improve another system somewhere else, you might be interested in reaching out to the people that work on that system and asking if they have any interest or any advice

  * If you would like to automate a physical task, you might be interested in reaching out to someone more familiar with it

 - Using the terminal efficiently

 - Should I learn Python?

 - How can I decide what to automate?

Scale

  The impact of doing a small improvement for many people can be comparable to doing a large improvement for a small number of people.

 - What is a software dependency?

What is a software dependency?

  A dependency in software is the idea that one entity uses something else.

  This allows the second entity to reuse what has already been provided by the first entity.

  For example, in the renderer for this knowledge graph, we use Marked to help generate appropriately styled html more easily

 - What is Jeff's Knowledge Graph?

 - What is Marked?

Dependencies aren't free

  Dependencies can have security issues

  Dependencies can increase the size of the final product (requiring more bytes to download and store)

  Dependencies can be complicated projects, and if their maintainers aren't interested in adding a new feature, they can be more difficult to change

  As a result, if a dependency only provides a small amount of value to your project, it is often worthwhile to reimplement that small amount of logic yourself.

 - What is a software dependency?

People are initially not familiar with a given system

Familiarity with a system tends to increase

  As a person works with a given system:

  * they should learn about it

  * they should look for opportunities to work with it more easily

  This should make the person become more familiar with the system over time

New people take time to become efficient

  When a person starts working on a new topic/project/area, it takes time for that person to become efficient.

 - People are initially not familiar with a given system

 - Familiarity with a system tends to increase

Asking for help

 - Asking for help is efficient for unfamiliar tasks
 - Who to ask for help

Asking for help is efficient for unfamiliar tasks

  If someone else is already familiar with a system that you need to work with or modify, and if that person has capacity to help, it is probably more efficient to reach out to that person for help instead

 - New people take time to become efficient

Who to ask for help

  If you can identify someone that is familiar with the topic you're interested in, that person may be a good person to ask for help

  If your project involves source code, you may be able to determine who has made changes to this project, in which case that person is likely to be familiar with it.

 - Examining a project's source code

Avoid duplicate code

  Code duplication is the idea of having multiple pieces of code that do the same thing.

  This is usually a bad thing because if you want to change the logic, you have to remember to change each copy.

  If you forget to change every copy, the improvement that you were adding might not be applied to the unmodified copies.

  If you are writing the same code multiple times, you usually should put the code in one place and reuse it.

  If several people or projects are reusing the same code, it's often helpful to move the code into another location and then specify a dependency so you can reuse it.

 - What is a software dependency?

 - Dependencies aren't free

Software testing

 - What is unit testing?

 - What is integration testing?

What is unit testing?

  Unit testing is a way of verifying part of a computer system. A unit test is the smallest class of test. A good unit test only does in-memory operations and doesn't need to access the filesystem or the network.

 - What is a computer program?

What is integration testing?

  Integration tests are automated tests that interact with a running instance of a computer system to make sure it is working correctly.

  Integration tests run more slowly than unit tests.

  Also, integration test failures provide less detail about the location of the problem than unit test failures do.

  So, integration tests should be focused on checking things that are difficult to check with a unit test.

 - What is a computer program?

Continuous integration

  Continuous integration is the idea of having a system that verifies that software builds correctly and passes tests

  This can be helpful because as software grows, the number of ways to use it can grow too, and it can be easy to forget to verify all of the combinations.

 - Building code

 - Software testing

 - People make mistakes

Reliable builds

  Software builds are often invoked many times by developers, and they should be reliable. If running the build twice in a row gives two different results, that is difficult to use and difficult to debug.

 - Building code

Building code

  Building code refers to the process of converting from the source code to the distributable artifact.

  In many cases this involves running a compiler.

 - What is a computer program?

People make mistakes

  So, we try to set up systems to prevent the most common and most important mistakes

Preparing for mistakes

  Sometimes people make mistakes, which introduce problems that prevent us from being able to do what we want to do.

  In a large enough system, mistakes will happen fairly often.

  * If we can automatically detect a mistake and can prevent causing a problem for anyone else, that is usually the best outcome.

  * If we can't prevent a mistake but we can quickly detect a problem

      * That gives us more time to handle it before it causes much trouble

      * That gives us more information about what triggered the problem

          * That gives us more information about how to fix it

  * It can help to make backups of things that are important

      * If one copy of a piece of information is lost, if there is a backup, it can be restored from the backup

  If you're interested in a simulation of a large system with lots of opportunities for mistakes, you might be interested in [Oxygen Not Included](https://store.steampowered.com/app/457140/Oxygen_Not_Included/) or [Factorio](https://www.factorio.com/).

 - People make mistakes

People are forgetful

  Different people may forget different pieces of information at different times.

  This type of information is often easier to remember:

  * Information that makes sense to the person
  * Information that the person has remembered for a while already
  * Information that the person is interested in
  * Information that doesn't change often
  * Information that the person encountered recently

Take notes

  This can help you to more easily remember what you've been doing.
  You might find it useful to record things that you're more likely to forget, such as:

  * Important file paths that you discovered recently
  * Your latest progress on your current project

 - People are forgetful

Backwards compatibility

  Backwards compatibility is the idea of a new version of software being able to process the same inputs as its previous version

Why backwards compatibility?

  Backwards compatibility is nice because it means that users of the old version of the software can upgrade to the new version without having to make changes

  Backwards compatibility is more important for software that has lots of users

 - Backwards compatibility

How do I modify a repository in GitHub?

  To modify a repository in GitHub:

  1. fork the repository to your account
  1. modify your fork
  1. contribute the changes back via a pull request

 - How do I modify my own repository in GitHub?
 - How do I fork a repository in GitHub?
 - How do I make a pull request in GitHub?

How do I fork a repository in GitHub?

  There should be a button in GitHub to fork it.
  This makes a copy in GitHub of the original repository and puts it under your account.

How do I modify my own repository in GitHub?

  Download the repository, make some changes, and upload your changes

 - How do I download a repository from GitHub?
 - How do I upload changes to a GitHub repository?

How do I download a repository from GitHub?

  Install [git](https://git-scm.com/) and use it to download the repository from [GitHub](https://github.com/).

How do I upload changes to a GitHub repository?

  1. inform Git about any changes you made: run `git commit -a`
  2. `git push`

 - How do I download a repository from GitHub?

How do I make a pull request in GitHub?

  GitHub should have a button for making a pull request if you have forked the repository

 - How do I fork a repository in GitHub?

What is a merge conflict?

  A [merge conflict](https://stackoverflow.com/questions/24852116/what-exactly-is-a-merge-conflict) is when two different people make different changes to the same part of a file, and someone is trying to apply both of these changes at once.

What is a mergetool?

  A mergetool is a tool that Git runs to help you resolve merge conflicts.

 - What is a merge conflict?

How can I enable vimdiff as the default mergetool in Git?

  As described [here](https://gist.github.com/karenyyng/f19ff75c60f18b4b8149), run this:

  ```
  git confit --global merge.tool vimdiff
  git config merge.conflictstyle diff3
  ```

 - What is a mergetool?

How can I interact with vimdiff?

  Vimdiff is essentially vim with multiple windows. Specifically:

  * To move your cursor to another window, press `ctrl-W ctrl-W`
  * To search forward for text, press "/" and type the text and press <Enter>
  * To search reverse for text, press "?" and type the text and press <Enter>
  * To move your cursor when using Cygwin, you might have to use "h", "j", "k", and "l" instead of the arrow keys
  * To insert text, type "i" and type some text and press <Escape>
  * To save and quit all files, type ":wqa"

How can I resolve merge conflicts with vimdiff?

 - How can I enable vimdiff as the default mergetool in Git?
 - How can I interact with vimdiff?

How can I resolve merge conflicts without a mergetool?

  To resolve a merge conflict without a mergetool, you can edit the files directly.
  Run `git status` to see the files that need changing.
  Use your favorite editor to edit them.
  Use `git add <filename>` to tell git when you are done editing a file.

How can I restore state from a git commit?

  Each git commit has a set of files and some history.

  Your git repository also has a HEAD pointer, some files, and usually a current branch

  * If you want to update the commit that the current branch points to:
      * If you want to update your files too, run `git reset <otherCommit> --hard`
          * Careful - this will overwrite any uncommitted changes you have and can be dangerous
      * If you don't want to update your files, run `git reset <otherCommit>`
  * If you don't want to update the commit that the current branch points to:
      * If you want to update the HEAD pointer and your current files, run `git checkout <otherCommit>`
      * If you don't want to update the HEAD pointer:
          * If you want to update all your files, do `git checkout <otherCommit> -- .`
              * This will also overwrite any changes
          * If you want to update some of your files, do `git chekout <otherCommit> -- <subdirectory>`

What is git reflog?

  Git's reflog is a history of commits that you have checked out. Run `git reflog` to see it.

  This will output a history of:

  * The hash of the commit
  * The names of any branches pointing at this commit
  * A description of which git commit brought you to that commit

How do I restore changes from the reflog?

  After you get a history of changes from `git reflog`, you can get them back like any other commit.

 - What is git reflog?
 - How can I restore state from a git commit?

How can I resolve a merge conflict?

  If you would like to see all of the versions of the file (common ancestor, left version, right version, and merge version) at once and would like to use `vim`, tell `git` to use `vimdiff` as a mergetool.

  If you would like to edit the file with another program, you don't need to configure a mergetool.

  When you think you have resolved all of the conflicts, make sure to check that your changes look right (`git status` and `git log -p`)

  If you make a mistake, you can go back to old versions of files or commits using the reflog

  When you are sure you have resolved all of the conflicts, tell Git that you are done by rerunning the command that caused the conflict: either `git rebase --continue` or `git merge --continue`

 - How can I resolve merge conflicts with vimdiff?
 - How can I resolve merge conflicts without a mergetool?
 - How do I restore changes from the reflog?

How can I make a file?

  If you want to make a file, you can:
  * Type it yourself using an editor
  * Make your own program for making the file
  * Find an existing program for making the file
      * Which program you should use depends on what kind of file you want to make

 - How can I modify lots of files at once?
 - Editor programs

Editor programs

  An editor is a program where you can type text and the program will put that information into a file.

 - Python editors
 - What is Vim?
