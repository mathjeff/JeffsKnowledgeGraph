# Some information about Artificial Intelligence

What is AI?

  An artificial intelligence is a computer system that has been trained on data to make decisions.

AI uses patterns

  AIs make predictions based on patterns.

  If there is no pattern in the data given to the AI, the AI cannot reliably make precise, accurate predictions.

  For example, if we flip a fair, random coin N times, we will get a sequence of N results. Then the result of the next flip has a 1/2 chance of being heads and a 1/2 chance of being tails. If we ask an AI to use that information to predict the next result, then whether the AI predicts heads or tails, that result will have a 1/2 chance of being incorrect.

 - What is AI?

We want AI models to be generalizable

  When we train an AI model to give the correct answers for some training examples, it can theoretically just learn the exact answers to the specific examples.

  This would allow the computer to make accurate predictions during training, but probably wouldn't be very useful after that.

  In the cases where someone wants a tool that memorizes the answers, they don't usually train an AI for that task.

 - What is AI?

More complicated models benefit from more data

  If an AI model has lots of parameters and is trained on a small amount of data, then even if it's not directly memorizing the answers, it is possible that the model is still essentially memorizing them.

  Similar to a hash table, if an AI computed a hash code for each example and memorized the test result for each hash code, that would still be approximately the same as directly memorizing the answer for each example, as long as most hash codes were unique.

  If we know the complexity of a model and the amount of data that the model was trained on, we can use [Hoeffding's inequality](https://en.wikipedia.org/wiki/Hoeffding%27s_inequality) to compute the probability of the model having a high error rate.

 - We want AI models to be generalizable

 - What is a hash table?

 - What is a hash code?

Decision trees

  A decision tree is a type of AI model. When a tree makes a prediction about a specific datapoint, it evaluates a series of yes/no questions until it arrives an answer.

 - What is AI?

Neural networks

  A neural network is a type of AI model.

  It involves a collection of nodes, each of which is connected to many other nodes.

  Most nodes combine their inputs and apply a nonlinear function to produce an output.

  The details of how a node combines its inputs is dependent on its weights.

  The weights of node connections in a graph make up the parameters of the neural network.

  Neural networks can model many different functions and can be trained.

 - What is AI?

Training neural networks

  A neural network is a complicated function that makes predictions for an input based on its internal parameters.

  Training a neural network involves changing its parameters in such a way that its predictions for a training set get more accurate.

  Usually the way this works is:

  1. The user identifies some training data

  2. The user chooses a loss function

  3. Backpropagation identifies the gradient of the loss on this training set with respect to the network parameters

  4. Gradient descent repeatedly uses backpropagation to compute the gradient, and uses the gradient to change the network's parameters to reduce the loss

 - Neural networks

 - What is a loss function?

 - Gradient descent

 - What is backpropagation?

Gradient descent

  [Gradient descent](https://en.wikipedia.org/wiki/Gradient_descent) is an algorithm that attempts to find the minimum of an arbitrary, unknown function.

  The way that it works is:

  1. Choose a point to start at.

  2. Compute the gradient of the function at that point.

  3. Move in the direction of the gradient.

  4. Repeat until satisfied.

  Note that this isn't guaranteed to find the absolute minimum of a function.

  If the function has multiple regions separated by a mountain and the initial guessed point was on one side of the mountain, then other points on the other side of the mountain may not be considered and may have even smaller values.

  One approach to increase the probability of finding the absolute minimum is to run this algorithm several times, each with a different initial guess.

 - What is a gradient?

Large Language Models

  Large language models are neural networks that attempt to understand language.

  They're often trained to predict a specific word in a text given the rest of the surrounding words.

 - Neural networks

What is a loss function?

  A loss function is a function that compares the output of an AI model (for a given input) to the correct answer and computes a penalty.

  This penalty is called "loss".

  Smaller values are better, with 0 being the best

  For example, suppose we have an AI that is supposed to identify objects.

  * If we show it an apple and it outputs the text "apple", we might assign that a loss of 0.

  * If we show it an apple and it says "cherry", we might assign that a loss of 0.1.

  * If we show it an apple and it says "chair". we might assign that a loss of 1.

 - What is AI?

What is backpropagation?

  Backpropagation is a way of determining the gradient of the output of a neural network with respect to each of the network's parameters

  Backpropagation starts at the last layer in the neural network and computes the gradient of each output of the network with respect to each parameter in the last layer of the network.

  Then, backpropagation proceeds to the previous layer (this is why it's called "backpropagation") and computes the gradient of each output of the network as a function of each parameter in that layer of the network.

  This process continues until each gradient is computed.

 - What is a gradient?

 - Neural networks

What is a gradient?

  A gradient is a list of slopes, with one slope per dimension.

  A gradient tells how much one value changes as a result of a small change in another value.

  For example, for a function `z = 3x + y*y`, the gradient is `(3, 2y)` because increasing `x` by a tiny amount will increase `z` by three times that amount, and increasing `y` by a tiny amount will increase `z` by that amount times `2y`.

Expectation Maximization

  [Expectation maximization](https://en.wikipedia.org/wiki/Expectation%E2%80%93maximization_algorithm) is a method for guessing appropriate values for the parameters of a model based on some datapoints, most or all of which are usually unlabelled.

  It involves these steps:

  1. Choose some initial guesses for the parameters
  1. Repeatedly do this:
      * For each datapoint and each label, compute the probability that that datapoint has that label based on the model parameters.
      * Compute the most likely model parameters based on the previously computed labels.

  An expectation maximization algorithm is a semi-supervised learning algorithm

 - What is semi-supervised learning?

What is supervised learning?

  Supervised learning is learning where each datapoint in the training data knows what its classification is

What is semi-supervised learning?

  Semi-supervised learning is learning where some answers may be known and some may be unknown

  If all answers are known, it is the same as supervised learning

  If no answers are known, it is the same as unsupervised learning

 - What is supervised learning?
 - What is unsupervised learning?

What is unsupervised learning?

  Unsupervised learning is learning where no answers are known.

  A common type of unsupervised learning is to cluster datapoints into groups

What are embeddings for?

  If a computer has two objects and wants to know how similar they are, it often works well to compute an embedding for each of the objects and compare the embeddings.

  If there are lots of objects to compare, this only requires computing each embedding once.

  If you want to search for similar objects, it's easier to search for similar embeddings because they are numbers that can be used as keys in a data structure.

 - What is an embedding?

What is an embedding?

  An embedding is a list of numbers that represents an object

  For example, if you want to compute an embedding for a fruit, you could choose to make a list of these numbers:

  * The average amount of red in the fruit
  * The average amount of green color in the fruit
  * The average amount of blue color in the fruit
  * The length of the fruit
  * The mass of the fruit

 - What is a vector?

What is a vector?

  A vector is a list of numbers

What is a GPU?

  A graphics processing unit is a computer system made of a large number of simple processors. Each processor must execute the same instruction at a time but operates on different data.

Why is a GPU called a GPU?

  A GPU is useful for determining what information to display on a screen. That was what they were first used for.

  Nowadays a GPU may also be used for artificial intelligence tasks that also involve running similar instructions on large amounts of data.

 - What is a GPU?

What is pytorch?

  Pytorch https://github.com/pytorch/pytorch is a python-based platform to train machine learning models with CPU/GPU.

  You can install pytorch by `pip3 install torch` and run pytorch in python by `import torch`.

 - What is a GPU?

What is a tensor?

  Tensor is a form to hold n-dimensional arrays in GPU.

  You can convert Numpy arrays to tensors by `your_tensor = torch.from_numpy(your_array.np())`.

  You can save tensors to GPU by `your_tensor.to('cuda')`.

 - What is a GPU?

 - What is pytorch?

 - What is Numpy?

 - What is Python?

What is Numpy?

  Numpty is a python package to do computation on arrays.

  You can install Numpy by `pip install numpy` and run Numpy in python by `import numpy as np`.

 - What is Python?

How to import Pandas data as tensors?

  Pandas is a python package that works with datasets.

  You can install Numpy by `pip install pandas` and run Numpy in python by `import pandas as pd`.

  You can summarize your data in CSV files and import your data using Pandas by `data = pd.read_csv(data_file)`.

  Then you can convert the non-numeric columns of your data as categories of 0s and 1s by `non_num_data = data.loc[:,['non_num_col1','non_num_col2',...]]` and `non_num_data = pd.get_dummies(non_num_data, dummy_na=True)`.

  You can save the numeric columns of your data as `num_data = data.loc[:,['num_col1','num_col2',...]]`.

  You can check your data by `num_data.head()` and `non_num_data.head()`, and check their size (number of rows and number of columns) by `num_data.shape` and `non_num_data.shape`.

  Now you can convert your data into tensors by `non_num_data = torch.tensor(non_num_data.to_numpy(dtype=float))` and `num_data = torch.tensor(num_data.to_numpy(dtype=float))`.

 - What is a tensor?

 - What is Python?

How to deal with missing values in training/testing data?

  Dealing with missing data (Na or NaN or '') properly is very important in data science.

  An example of how missing data (as 0s) that fools people. [Major data analysis errors invalidate cancer microbiome findings](https://journals.asm.org/doi/10.1128/mbio.01607-23)

  1) You can delete all rows and columns that contain missing data.

  2) You can convert missing data into two columns: column 1 shows all the existing categories; and column 2 shows whether a category is missing by `data_with_categories = pd.get_dummies(input_with_missing_data, dummy_na=True)`.

  3) You can replace missing data with means by `data_with_means = input_with_missing_data.fillna(input_with_missing_data.mean())`.

  Most importantly, you should always check whether the pattern you get from a model is associated with missing data.

 - What is Python?

 - How to import Pandas data as tensors?
